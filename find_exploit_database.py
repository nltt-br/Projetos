# -*- coding:utf-8 -*-
import requests
from time import sleep
from bs4 import BeautifulSoup as bs

class ConsumerExploitDatabase:

    def get_info_url(self):

        url = "https://www.exploit-db.com/exploits/4807{}"
        headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}
        #url = "https://www.exploit-db.com/exploits/48073"
        return url, headers

    def m_consumer_db(self):

        url, headers = self.get_info_url()
        count = 0

        base = """
██████╗ ██╗██████╗ ██╗      █████╗ ██████╗ ███████╗
██╔══██╗██║██╔══██╗██║     ██╔══██╗██╔══██╗██╔════╝
██████╔╝██║██║  ██║██║     ███████║██████╔╝███████╗
██╔══██╗██║██║  ██║██║     ██╔══██║██╔══██╗╚════██║
██████╔╝██║██████╔╝███████╗██║  ██║██████╔╝███████║
╚═════╝ ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝╚═════╝ ╚══════╝
        """


        while True:
            try:
                #traz a url com a string a ser formatada
                url_mod = url.format(str(count))

                #cria a requisição para a url do exploitdb
                get_browser = requests.get(url_mod, headers=headers)

                if(get_browser.status_code == 200):
                    #cria um objeto da classe bs4 fazendo parser para html e procurando pelo título do exploit
                    soup = bs(get_browser.text, 'html.parser')
                    name_exploit = soup.find(class_='card-title text-secondary text-center')
                    name_exploit_mod = name_exploit.text
                    name_exploit_mod_blank_space = name_exploit_mod.replace(' ', '')
                    string_status_sucess = "{}Com a seguinte url --> {} está disponível."
                    string_status_sucess_mod = string_status_sucess.format(name_exploit_mod_blank_space, url_mod)

                    print(base)
                    print(string_status_sucess_mod)

                else:
                    pass
                    #string_status_error = "\nO exploit com a seguinte url --> {} não está dispónivel na base do Exploit-DB"
                    #string_status_error_mod = string_status_error.format(url_mod)
                    #print(string_status_error_mod)

            except Exception as e:
                pass
                #string_status_error = "\nO exploit com a seguinte url --> {} não está dispónivel na base do Exploit-DB"
                #string_status_error_mod = string_status_error.format(url_mod)
                #print(string_status_error_mod)

            count += 1


            if(count > 9):

                if(get_browser.status_code == 200):
                    count = 0
                    var_int_fixo = 48070 + 10

                    url = "https://www.exploit-db.com/exploits/{}"

                    url_mod = url.format(str(var_int_fixo))

                    try:
                        #cria a requisição para a url do exploitdb
                        get_browser = requests.get(url_mod, headers=headers)

                        if(get_browser.status_code == 200):
                            #cria um objeto da classe bs4 fazendo parser para html e procurando pelo título do exploit
                            soup = bs(get_browser.text, 'html.parser')
                            name_exploit = soup.find(class_='card-title text-secondary text-center')
                            name_exploit_mod = name_exploit.text
                            name_exploit_mod_blank_space = name_exploit_mod.replace(' ', '')
                            string_status_sucess = "{}Com a seguinte url --> {} está disponível."
                            string_status_sucess_mod = string_status_sucess.format(name_exploit_mod_blank_space, url_mod)

                            print(base)
                            print(string_status_sucess_mod)

                        else:
                            pass


                    except Exception as e:
                        pass

                    count += 1

                else:
                    break


consumer = ConsumerExploitDatabase()
consumer.m_consumer_db()
